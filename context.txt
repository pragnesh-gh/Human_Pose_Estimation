def get_pose2D(source_path, output_dir):
    _dbg("Entering get_pose2D", source_path=source_path, output_dir=output_dir)

    print('\nGenerating 2D pose...')

    # --- Shield HRNet import from our CLI flags ---
    with _strip_argv():
        _dbg("Importing hrnet gen_kpts with stripped argv", argv=sys.argv)
        from lib.hrnet.gen_kpts import gen_video_kpts as hrnet_pose
    _dbg("Imported hrnet gen_kpts", func_module=hrnet_pose.__module__, func_name=hrnet_pose.__name__)

    # Small helper to write a fallback npz + log when no person / HRNet fails
    def _write_fallback_npz_and_log():
        # Determine T (frames)
        T = 1
        # Try to detect if it's a video by opening with cv2 and reading frame count
        try:
            cap = cv2.VideoCapture(source_path)
            if cap is not None and cap.isOpened():
                frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
                if frames and frames > 0:
                    T = frames
            if cap is not None:
                cap.release()
        except Exception:
            pass

        # Build zeros reconstruction: (1, T, 17, 2) so downstream code is happy
        reconstruction = np.zeros((1, T, 17, 2), dtype=np.float32)
        valid_mask = np.zeros((T,), dtype=np.uint8)

        out2d_dir = os.path.join(output_dir, 'input_2D')
        os.makedirs(out2d_dir, exist_ok=True)
        output_npz = os.path.join(out2d_dir, 'keypoints.npz')
        np.savez_compressed(output_npz, reconstruction=reconstruction, valid_mask=valid_mask)

        # Write a simple log so you know this source was skipped for pose detection
        skip_log = os.path.join(output_dir, 'skip.log')
        with open(skip_log, 'a', encoding='utf-8') as f:
            f.write(f"[SKIP] No person detected or HRNet failed for: {source_path}\n")
            f.write(f"       Wrote fallback npz to: {output_npz}\n")
        _dbg("Wrote fallback npz + skip log", frames=T, npz=output_npz, log=skip_log)

    # --- Shield HRNet call from our CLI flags as well ---
    try:
        with _strip_argv():
            _dbg("Calling hrnet_pose(...) with stripped argv", argv=sys.argv,
                 det_dim=416, num_peroson=1, gen_output=True)
            # --- Force single image to look like a 1-frame numbered sequence for HRNet ---
            src_for_hrnet = source_path
            if is_image:
                tmp_seq_dir = os.path.join(output_dir, "input_2D", "_hrnet_tmp_seq")
                os.makedirs(tmp_seq_dir, exist_ok=True)
                # Clear any leftovers from previous runs
                for f in os.listdir(tmp_seq_dir):
                    try:
                        os.remove(os.path.join(tmp_seq_dir, f))
                    except Exception:
                        pass

                # Write image as frame_0000.png and pass HRNet a numbered pattern it expects
                img_single = cv2.imread(source_path)
                if img_single is None:
                    raise FileNotFoundError(f"Cannot read image: {source_path}")
                tmp_frame = os.path.join(tmp_seq_dir, "frame_0000.png")
                cv2.imwrite(tmp_frame, img_single)

                src_for_hrnet = os.path.join(tmp_seq_dir, "frame_%04d.png")
            keypoints, scores = hrnet_pose(src_for_hrnet if is_image else source_path, det_dim=416, num_peroson=1, gen_output=True)
    except Exception as e:
        # Typical when no people are present: ValueError from internal transpose
        _dbg("HRNet call failed with Exception; writing fallback npz and continuing", err=str(e))
        _write_fallback_npz_and_log()
        print('Generating 2D pose (fallback, no person) complete!')
        return

    _dbg("HRNet returned", kpts_shape=np.array(keypoints).shape, scores_shape=np.array(scores).shape)

    try:
        keypoints, scores, valid_frames = h36m_coco_format(keypoints, scores)
        _dbg("After h36m_coco_format", kpts_shape=np.array(keypoints).shape,
             scores_shape=np.array(scores).shape, valid_frames_len=len(valid_frames))

        re_kpts = revise_kpts(keypoints, scores, valid_frames)
        _dbg("After revise_kpts", re_kpts_shape=np.array(re_kpts).shape)

        # --- If HRNet produced no usable frames/person, write fallback and stop 2D ---
        if (not isinstance(re_kpts, np.ndarray)) or re_kpts.size == 0 or len(valid_frames) == 0:
            _dbg("Empty 2D detections; writing fallback npz",
                 re_kpts_shape=str(getattr(re_kpts, "shape", None)), valid_frames_len=len(valid_frames))
            _write_fallback_npz_and_log()
            print('Generating 2D pose (no person) complete!')
            return

        print('Generating 2D pose successful!')

        out2d_dir = os.path.join(output_dir, 'input_2D')
        os.makedirs(out2d_dir, exist_ok=True)
        output_npz = os.path.join(out2d_dir, 'keypoints.npz')

        # Build a frame-aligned valid mask from valid_frames (no dropped frames)
        T = int(re_kpts.shape[1]) if re_kpts.ndim >= 2 else len(valid_frames)
        valid_mask = np.zeros((T,), dtype=np.uint8)
        if len(valid_frames) > 0:
            vf = np.array(valid_frames, dtype=int)
            vf = vf[(vf >= 0) & (vf < T)]
            valid_mask[vf] = 1

        np.savez_compressed(
            output_npz,
            reconstruction=re_kpts,       # aligned to full video length
            valid_mask=valid_mask         # 1 = person present on that frame
        )
        if POSE_DEBUG:
            print(f"[2D.DBG] Saved {output_npz}: T={re_kpts.shape[1]}, valid_sum={int(valid_mask.sum())}")
        _dbg("Saved 2D keypoints", output_npz=output_npz)
    except Exception as e:
        # If post-HRNet formatting fails for an empty/odd case, fall back too
        _dbg("Post-processing failed; writing fallback npz and continuing", err=str(e))
        _write_fallback_npz_and_log()
        print('Generating 2D pose (fallback, post-process) complete!')
        return