üîπ Files to Modify / Create ‚Äî Status Update

1) New: common/orientation.py  ‚úÖ DONE
   - compute_torso_frame(joints_3d, joints_conf=None, layout="h36m") -> (quat_wxyz, forward, right, up, confidence)
   - smooth_quat(prev_quat_wxyz, cur_quat_wxyz, alpha=0.2) -> quat_wxyz
   - NumPy I/O, Torch-backed via quaternion.py; no side effects.

2) Updated: common/quaternion.py  ‚úÖ DONE
   - Added: quat_normalize, quat_dot, quat_slerp, quat_from_rotmat, rotmat_from_quat, basis_from_quat
   - Keeps existing qrot, qinverse. All functions are Torch-native and batch-safe.

3) Updated: common/arguments.py  ‚úÖ DONE
   - Added orientation flags (opt-in):
     --estimate-orientation
     --orientation-layout {h36m,coco17}
     --orientation-alpha <float>
     --orientation-conf-min <float>
     --orientation-overlay [bool]
     --orientation-overlay-scale <float>
     --orientation-save <path.{csv|json}>
   - No default behavior changes unless flags are provided.

4) Pending: run_poseformer.py  ‚è≥ TODO
   - After 3D prediction per frame:
     - Call compute_torso_frame(..., layout=args.orientation_layout)
     - Apply smooth_quat(..., alpha=args.orientation_alpha)
     - If args.orientation_save: buffer ‚Üí write CSV/JSON
     - Pass (quat, forward, confidence) to viz when requested
   - Gate by confidence ‚â• args.orientation_conf_min.

5) Pending (optional): common/visualization.py  ‚è≥ TODO
   - If args.orientation_overlay and confidence OK:
     - Draw short axis triad (forward/right/up) at pelvis or mid-shoulder
     - Scale by args.orientation_overlay_scale

üîπ Next Steps (in order)
A) Wire run_poseformer.py hooks (minimal, feature-flagged)
B) Add optional overlay in visualization.py
C) (Optional later) Add evaluation util to compute angular error vs GT on H36M